generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Venue {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  category  String
  capacity  Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Website {
  id                  Int      @id @default(autoincrement())
  heroTitle           String
  heroSubtitle        String
  heroDescription     String
  heroBackgroundImage String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Event {
  id                   Int            @id @default(autoincrement())
  title                String
  imageUrl             String?
  startDate            DateTime
  endDate              DateTime
  location             String
  isPaid               Boolean
  ticketPrice          Float?
  eventType            String
  industryType         String
  businessType         String
  description          String         @db.Text
  requiresRegistration Boolean
  isPublished          Boolean        @default(false)
  isFeatured           Boolean        @default(false)
  status               String         @default("pending") // Added status field
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  registrations        Registration[]
  guests               Guest[]
  schedules            Schedule[]
  exhibitors           Exhibitor[]
  materials            Material[]
  news                 News[]
  videos               Video[]
  photos               Photo[]
  livestream           Livestream?
  userId               String
  User                 User           @relation(fields: [userId], references: [id])
}

model Registration {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  name      String
  phone     String
  email     String
  company   String
  type      String
  status    String   @default("pending") // Added status field
  createdAt DateTime @default(now())
}

model Guest {
  id          Int        @id @default(autoincrement())
  eventId     Int
  event       Event      @relation(fields: [eventId], references: [id])
  name        String
  company     String
  imageUrl    String?
  position    String
  description String     @db.Text
  status      String     @default("pending") // Added status field
  schedules   Schedule[]
}

model Schedule {
  id          Int      @id @default(autoincrement())
  eventId     Int
  event       Event    @relation(fields: [eventId], references: [id])
  name        String
  startTime   DateTime
  endTime     DateTime
  description String   @db.Text
  status      String   @default("pending") // Added status field
  guests      Guest[]
}

model Exhibitor {
  id          Int     @id @default(autoincrement())
  eventId     Int
  event       Event   @relation(fields: [eventId], references: [id])
  name        String
  logo        String?
  website     String?
  description String  @db.Text
  status      String  @default("pending") // Added status field
}

model Material {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  name      String
  fileUrl   String
  status    String   @default("pending") // Added status field
  createdAt DateTime @default(now())
}

model News {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  title     String
  content   String   @db.Text
  status    String   @default("pending") // Added status field
  createdAt DateTime @default(now())
}

model Video {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  name      String
  videoUrl  String
  status    String   @default("pending") // Added status field
  createdAt DateTime @default(now())
}

model Photo {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  imageUrl  String
  caption   String
  status    String   @default("pending") // Added status field
  createdAt DateTime @default(now())
}

model Livestream {
  id        Int    @id @default(autoincrement())
  eventId   Int    @unique
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  streamUrl String
  status    String
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  password  String
  plan      String
  role      String   @default("user")
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

// Survey models...

model Survey {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  questions       Question[]
  responses       Response[]
  status          SurveyStatus  @default(DRAFT)
  currentQuestion Int           @default(0)
  qrCode          String?       @db.Text // Change to Text type to handle large strings
  isStarted       Boolean       @default(false) // Add isStarted field
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Participant     Participant[]
}

model Question {
  id        Int          @id @default(autoincrement())
  surveyId  Int
  survey    Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  content   String
  type      QuestionType
  options   Option[]
  order     Int
  responses Response[]
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  content    String
}

model Response {
  id         Int      @id @default(autoincrement())
  surveyId   Int
  survey     Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     String   @db.Text
  respondent String
  deviceInfo Json? // Store detailed device information
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([surveyId])
  @@index([questionId])
}

model Participant {
  id         Int      @id @default(autoincrement())
  surveyId   Int
  survey     Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  name       String
  deviceInfo Json
  createdAt  DateTime @default(now())

  @@index([surveyId])
}

enum SurveyStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TEXT
}

model Lottery {
  id              Int                  @id @default(autoincrement())
  name            String
  numberOfWinners Int
  status          String               @default("PENDING")
  winnersJson     String?
  isStarted       Boolean              @default(false)
  prizes          Prize[]
  participants    LotteryParticipant[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Prize {
  id          Int     @id @default(autoincrement())
  name        String
  quantity    Int
  probability Float
  lotteryId   Int
  lottery     Lottery @relation(fields: [lotteryId], references: [id])
}

model LotteryParticipant {
  id        Int      @id @default(autoincrement())
  lotteryId Int
  lottery   Lottery  @relation(fields: [lotteryId], references: [id])
  name      String
  email     String?
  isWinner  Boolean  @default(false)
  prizeId   Int?
  createdAt DateTime @default(now())
}

model QueueItem {
  id        Int      @id @default(autoincrement())
  number    Int
  people    Int
  queueType String
  status    String
  timestamp DateTime @default(now())
}
